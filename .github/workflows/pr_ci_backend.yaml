name: pr_ci_backend
on:
  pull_request:
    branches:
      - main
    types: [opened, reopened, synchronize]
  push:
    branches:
      - main
    paths:
      - "backend/**"

env:
  SECRET_KEY: "ONLY_FOR_TESTING"
  DATABASE_PORT: 5432
  DATABASE_HOST: localhost
  DATABASE_NAME: postgres
  DATABASE_USER: postgres
  DATABASE_PASSWORD: postgres


jobs:
  backend:
    services:
      postgres:
        image: postgres:13
        env:
            POSTGRES_USER: ${{ env.DATABASE_USER }}
            POSTGRES_PASSWORD: ${{ env.DATABASE_PASSWORD }}
            POSTGRES_DB: ${{ env.DATABASE_NAME }}
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    name: Run PR Backend Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python Environment
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade uv
          uv venv
          uv pip install -r backend/requirements-dev.txt

      - name: Activate Virtual Environment
        run: |
          . .venv/bin/activate
          echo PATH=$PATH >> $GITHUB_ENV

      - name: Run Ruff Format - Formatting Check
        run: ruff format ./backend

      - name: Run Ruff - Linting and Import Sorting Check
        if: always()
        run: ruff check ./backend

      - name: Run mypy - Static Type Checking
        if: always()
        run: mypy ./backend --config-file ./backend/pyproject.toml

      - name: Run pytest - Unit Tests
        if: always()
        run: pytest ./backend -vv

      - name: Run Django Migrations - Database Migrations Check
        run: |
          . .venv/bin/activate
          python ./backend/manage.py makemigrations
          python ./backend/manage.py migrate

      - name: Pytest coverage comment
        uses: MishaKav/pytest-coverage-comment@main
        with:
          pytest-coverage-path: ./coverage.xml
          junitxml-path: ./pytest.xml

      - name: Run pytest with Coverage
        run: |
          pytest ./backend --cov=backend --cov-report=xml --cov-report=term --cov-fail-under=80
        continue-on-error: true  # Allow failure but capture coverage result

      - name: Fail if Coverage is Below Threshold
        run: |
          COVERAGE=$(awk -F'"' '/line-rate/{print $2 * 100}' coverage.xml | head -n 1)
          echo "Coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "Code coverage is below the required threshold of 80%!"
            exit 1
          fi
